{"version":3,"file":"static/js/105.58018182.chunk.js","mappings":"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","sources":["page/UserPage/UserPage.styled.js","services/GitHubAPI.js","components/UserLanguage/Language.styled.js","components/UserLanguage/UserLanguage.js","page/UserPage/UserPage.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ListStyled = styled.ul`\ntext-align: center;\nborder-radius: 10px;\nbackground-color: rgba(255, 255, 128, .2);\n`;\n\nexport const TextStyled = styled.p`\ntext-align: center;\nborder-radius: 10px;\nbackground-color: rgba(255, 255, 128, .2);\n`;\n\nexport const LinkStyled = styled.a`\nmargin-left: 10px;\nborder-radius: 8px;\nbackground-color: rgba(255, 255, 128, .9);\nborder-color: blue;\nheight: 25px;\n`;\n\nexport const TitleStyled = styled.h1`\ncolor: rgb(222, 160, 30);\ntext-align: center;\n`\n\nexport const SecondTitleStyled = styled.h3`\ncolor: rgb(220, 160, 30);\ntext-align: center;\n`\n","import { Octokit } from \"@octokit/rest\";\n\n// const octokit = new Octokit()\n\nconst octokit = new Octokit({\n  auth: \"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\",\n});\n\n\nexport async function fetchUserData(userName) {\n  const { data } = await octokit.request(`GET /users/${userName}`, {\n  username: `${userName}`\n})\n  return data\n}\n\nexport async function fetchUserRepos(userName) {\n  const {data} = await octokit.request(`GET /users/${userName}/repos`, {\n    username: `${userName}`,\n  })\n  return data\n}\n\nexport async function fetchRepoLanguages(userName, repo) {\n  const {data} = await octokit.request(`GET /repos/${userName}/${repo}/languages`, {\n  owner: `${userName}`,\n  repo: `${repo}`,\n})\n  return data\n}\n\n","import styled from \"styled-components\";\n\nexport const TitleStyled = styled.h3`\ncolor: rgb(220, 160, 30);\ntext-align: center;\n`\nexport const ListStyled = styled.ol`\ntext-align: center;\nborder-radius: 10px;\nbackground-color: rgba(255, 255, 128, .2);\n`;\n","import { useEffect, useState } from \"react\"\nimport * as GitHubAPI from \"../../services/GitHubAPI\";\nimport toast from \"react-hot-toast\";\nimport {TitleStyled, ListStyled} from \"./Language.styled\";\n\nexport default function UserLanguage ({username, repos}) {\n  const [lang, setLang] = useState(null)\n\n            useEffect (() => {\n              if (!repos) {return}\n              async function fetchLanguageUserReposs () {\n              try {\n                const promises = repos.map(repo => GitHubAPI.fetchRepoLanguages(username, repo.name));\n\n                Promise.all(promises).then(results =>{\n                console.log(\"results\", results);\n                  const allLanguages = results.reduce((acc, obj) => {\n                    const entries = Object.entries(obj)\n                    acc.push(...entries)\n                    return acc\n                  }, [])\n                // console.log(\"allLanguages\",allLanguages)\n                \n                  const uniqueLanguages = allLanguages.reduce((acc, entries) => {\n                    acc[entries[0]] = 0\n                    return acc\n                  }, {})\n                // console.log(\"uniqueLanguages\",uniqueLanguages)\n\n                allLanguages.reduce((acc, entries) => {\n                    for(const key in uniqueLanguages) {\n                      if(key === entries[0]) {uniqueLanguages[key] += entries[1]}\n                    }\n                    return acc\n                  }, [])\n                  setLang(uniqueLanguages)\n              })\n            }\n              catch(error) {toast.error(\"This didn't work. Thumping went wrong! Try again!!!\")\n              }\n          }\n          fetchLanguageUserReposs ()\n          },[repos, username])\n\n          // function count (){\n          //   if (!lang) {return}\n          //   const values = Object.values(lang);\n          // const sumWithInitial = values.reduce(\n          // (previousValue, currentValue) => previousValue + currentValue, 0);\n\n          const allLanguage = []\n          for(const key in lang) {\n            allLanguage.push({\n              name: key,\n              value: lang[key],\n              // total: sumWithInitial,\n            })}\n          console.log(\"lang\",lang)\n          console.log(\"allLanguage\", allLanguage)\n  return (\n    <>\n    <TitleStyled>Languages</TitleStyled>\n  <ListStyled>\n\n  {lang && allLanguage.map(item =>\n    <li key={item.name}>{item.name}: {item.value}</li>)}\n    {/* {lang && allLang.map(item =>\n    <li key={item.name}>{item.name}: {Math.round(item.value*100/item.total)}%</li>)} */}\n  </ListStyled>\n    </>\n  )\n}\n","import { useEffect, useState } from \"react\"\nimport toast from \"react-hot-toast\";\nimport { FaRegArrowAltCircleLeft } from \"react-icons/fa\";\nimport { Link, useParams } from \"react-router-dom\";\nimport {TextStyled, ListStyled, LinkStyled, TitleStyled, SecondTitleStyled} from \"./UserPage.styled\";\nimport UserLanguage from \"../../components/UserLanguage\"\nimport * as GitHubAPI from \"../../services/GitHubAPI\";\n\nexport default function UserPage () {\n  const [userData, setUserData] = useState(null)\n  const {username} = useParams();\n  const [repos, setRepos] = useState(null);\n\n  useEffect (()=> {\n    if (!username) {return}\n    async function fetchUserQ () {\n      try {\n        const fetchUser = await GitHubAPI.fetchUserData(username)\n        setUserData(fetchUser);\n      }\n      catch(error) {toast.error(\"This didn't work. Thumping went wrong! Try again!!!\")}\n      try {\n        const fetchUserRepos = await GitHubAPI.fetchUserRepos(username)\n        setRepos(fetchUserRepos)\n      }\n      catch(error) {toast.error(\"This didn't work. Thumping went wrong! Try again!!!\")}\n      }\n      fetchUserQ ()\n  },[username])\n\n  function filterRecentlyRepos () {\n    if(!repos) {return}\n    const sortRecentlyRepos = repos.sort((a, b) => Date.parse(b.updated_at) - Date.parse(a.updated_at)).slice(0,5)\n    return sortRecentlyRepos\n  }\n\nreturn(\n  <article>\n    <Link to={`/`} ><FaRegArrowAltCircleLeft/> go to Banks </Link>\n    {userData && repos &&\n    <>\n    <TitleStyled>{userData.name}</TitleStyled>\n    <LinkStyled href= {`${userData.html_url}`}> Link to User Page on GitHub </LinkStyled>\n    <TextStyled>Login: {userData.login}</TextStyled>\n    <TextStyled>Public repositories: {userData.public_repos} </TextStyled>\n    <TextStyled>Since when on github: {userData.created_at}</TextStyled>\n    <UserLanguage username={username} repos={repos}></UserLanguage>\n    <SecondTitleStyled>Popular Repositories</SecondTitleStyled>\n    {userData && repos && filterRecentlyRepos().map(item =>\n    <ListStyled key={item.id}>\n      <li>{item.name} <LinkStyled href={`${item.html_url}`}>url:{item.html_url}</LinkStyled></li>\n    </ListStyled>\n    )}\n    </>}\n  </article>\n)}\n"],"names":["ListStyled","styled","TextStyled","LinkStyled","TitleStyled","SecondTitleStyled","octokit","Octokit","auth","fetchUserData","userName","request","username","data","fetchUserRepos","fetchRepoLanguages","repo","owner","UserLanguage","repos","useState","lang","setLang","useEffect","promises","map","GitHubAPI","name","Promise","all","then","results","console","log","allLanguages","reduce","acc","obj","entries","Object","push","uniqueLanguages","key","error","toast","fetchLanguageUserReposs","allLanguage","value","item","UserPage","userData","setUserData","useParams","setRepos","fetchUser","fetchUserQ","to","href","html_url","login","public_repos","created_at","sort","a","b","Date","parse","updated_at","slice","filterRecentlyRepos","id"],"sourceRoot":""}